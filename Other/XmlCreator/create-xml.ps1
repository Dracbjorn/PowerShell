
function Save-File([string] $initialDirectory ){
 
    [System.Reflection.Assembly]::LoadWithPartialName("System.windows.forms") | Out-Null
 
    $OpenFileDialog = New-Object System.Windows.Forms.SaveFileDialog
    $OpenFileDialog.initialDirectory = $initialDirectory
    $OpenFileDialog.filter = "All files (*.*)| *.*"
    $OpenFileDialog.ShowDialog() |  Out-Null
 
    return $OpenFileDialog.filename
} 

Function Get-FileName($initialDirectory){
    [System.Reflection.Assembly]::LoadWithPartialName("System.windows.forms") | Out-Null
    
    $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
    $OpenFileDialog.initialDirectory = $initialDirectory
    $OpenFileDialog.filter = "TXT (*.txt)| *.txt"
    $OpenFileDialog.ShowDialog() | Out-Null
    $OpenFileDialog.filename
}

function create-test-xml ($testName, $testData, $file) {

#Setting XML Doc up
$xmlWriter = New-Object System.XMl.XmlTextWriter($file,$Null)
$xmlWriter.Formatting = 'Indented'
$xmlWriter.Indentation = 1
$XmlWriter.IndentChar = "`t"
$xmlWriter.WriteStartDocument()
$xmlWriter.WriteComment('Document Generated by XML Creator v1.0')

#Begin Question Pool
$xmlWriter.WriteStartElement('questionPool')
$xmlWriter.WriteElementString('hid', $testName)
$xmlWriter.WriteElementString('name', $testName)

#tags
$xmlWriter.WriteStartElement('tags')
$xmlWriter.WriteElementString('tag', 'import')
$xmlWriter.WriteEndElement()

#Beging Question Pool Set
$xmlWriter.WriteStartElement('questionPoolSet')
$XmlWriter.WriteAttributeString('weight','100') #setup input
$XmlWriter.WriteAttributeString('pick',$testData.Length)

##################################################
#Start looping through data to create questions###
##################################################

for($i=0;$i -lt $testData.Length;$i++) {

if ([string]::IsNullOrWhitespace($testData[0].Random)) {$random="true"} else {$random="false"}
$qnum = $testData[$i].Num -as [int]
$tripDigNum = "{0:D2}" -f $qnum
$questionName = $testName + "_Q" + $tripDigNum + "0"

#QUESTION METADATA
$xmlWriter.WriteStartElement('question')
$XmlWriter.WriteAttributeString('random',$random)
$xmlWriter.WriteElementString('hid', $questionName)
$xmlWriter.WriteElementString('name', $questionName)
$xmlWriter.WriteStartElement('tags')
$xmlWriter.WriteElementString('tag', 'import')
$xmlWriter.WriteEndElement()
$xmlWriter.WriteElementString('qtype','multipleChoice') #Look for type if there put there, else If wrong answer 3 is blank then MC

#QUESTION
$xmlWriter.WriteStartElement('richText')
$xmlWriter.WriteCData($testData[$i].Question)
$xmlWriter.WriteEndElement()

#FEEDBACK
$xmlWriter.WriteStartElement('feedback')
$xmlWriter.WriteCData($testData[$i].Feedback)
$xmlWriter.WriteEndElement()

#NOTE
$xmlWriter.WriteStartElement('note')
$xmlWriter.WriteCData($testData[$i].Note)
$xmlWriter.WriteEndElement()

#LEARNING OBJECTIVES
$xmlWriter.WriteStartElement('learningObjectives')
#$xmlWriter.WriteCData($testData[$i].'Learning Objective')
$xmlWriter.WriteEndElement()

############################
###MOVING INTO ANSWER SET###
############################
$xmlWriter.WriteStartElement('answers')

#ANSWER:1
$xmlWriter.WriteStartElement('answer')
$xmlWriter.WriteElementString('correct', 'true')
$xmlWriter.WriteElementString('points', '100')
$xmlWriter.WriteStartElement('value')
$xmlWriter.WriteCData($testData[$i].'Correct Answer')
$xmlWriter.WriteEndElement() #End Value
$xmlWriter.WriteEndElement() #End Answer

#ANSWER:2
$xmlWriter.WriteStartElement('answer')
$xmlWriter.WriteElementString('correct', 'false')
$xmlWriter.WriteElementString('points', '0')
$xmlWriter.WriteStartElement('value')
$xmlWriter.WriteCData($testData[$i].'Wrong Answer 1')
$xmlWriter.WriteEndElement() #End Value
$xmlWriter.WriteEndElement() #End Answer

#ANSWER:3
$xmlWriter.WriteStartElement('answer')
$xmlWriter.WriteElementString('correct', 'false')
$xmlWriter.WriteElementString('points', '0')
$xmlWriter.WriteStartElement('value')
$xmlWriter.WriteCData($testData[$i].'Wrong Answer 2')
$xmlWriter.WriteEndElement() #End Value
$xmlWriter.WriteEndElement() #End Answer

#ANSWER:4
$xmlWriter.WriteStartElement('answer')
$xmlWriter.WriteElementString('correct', 'false')
$xmlWriter.WriteElementString('points', '0')
$xmlWriter.WriteStartElement('value')
$xmlWriter.WriteCData($testData[$i].'Wrong Answer 2')
$xmlWriter.WriteEndElement() #End Value
$xmlWriter.WriteEndElement() #End Answer


$xmlWriter.WriteEndElement() #Ends answer

#####################
#LEAVING ANSWER SET##
#####################

#HINT
$xmlWriter.WriteStartElement('hints')
$xmlWriter.WriteCData($testData[$i].Hints)
$xmlWriter.WriteEndElement()



$xmlWriter.WriteEndElement() #Ends question

}

#####################
##END OF QUESTIONS###
#####################

#Close Question Pool
$xmlWriter.WriteEndElement()
$xmlWriter.WriteEndElement()
$xmlWriter.WriteEndDocument()
$xmlWriter.Flush()
$xmlWriter.Close()
}

function Test-XmlSchema {
    param
    (
        [Parameter(Mandatory = $true)]
        [ValidateScript({Test-Path $_})]
        [String]
        $XmlPath,
       
        [Parameter(Mandatory = $true)]
        [ValidateScript({Test-Path $_})]
        [String]
        $SchemaPath
    )

    $schemas = New-Object System.Xml.Schema.XmlSchemaSet
       $schemas.CompilationSettings.EnableUpaCheck = $false
       $schema = ReadSchema $SchemaPath
       [void]($schemas.Add($schema))
       $schemas.Compile()
      
       try
    {
        [xml]$xmlData = Get-Content $XmlPath
              $xmlData.Schemas = $schemas

        #Validate the schema. This will fail if is invalid schema
              $xmlData.Validate($null)
              return $true
       }
    catch [System.Xml.Schema.XmlSchemaValidationException]
    {
              return $false
       }
}

function ReadSchema {
       param($SchemaPath)
       try
    {
              $schemaItem = Get-Item $SchemaPath
              $stream = $schemaItem.OpenRead()
              $schema = [Xml.Schema.XmlSchema]::Read($stream, $null)
              return $schema
       }
       catch
    {
              throw
       }
       finally
    {
              if($stream)
        {
                     $stream.Close()
              }
       }
}

#Get input file
$inputfile = Get-FileName "$($env:USERPROFILE)\Documents"

#Convert to CSV
$tabDelimData = Import-Csv -Delimiter "`t" $inputfile

#Get save file location
$saveFile = Save-File "$($env:USERPROFILE)"

#Get test name
Add-Type -AssemblyName Microsoft.VisualBasic
$name = [Microsoft.VisualBasic.Interaction]::InputBox("Enter the name of the test:", "Test Name", "CQC001_E090_M010_S050_I020_ModExam_X010_P010")

#Create Test
create-test-xml $name $tabDelimData $saveFile

#Validate XML
$validation = Test-XmlSchema -XmlPath $saveFile -SchemaPath '\\nas.azuretitan.com\faculty_share\CDT_Resources\XmlCreator\asset_question_pool_validator.xml'
if($validation -eq "True") {[System.Windows.Forms.MessageBox]::Show("XML Successfull Validated: Click OK to Continue")}
